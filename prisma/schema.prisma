generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for NextAuth.js
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Ensure this field is present
  accounts      Account[]
  sessions      Session[]
  employee      Employee?
  posts         Post[]
}

// Custom models for the HR system
model Employee {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  email     String   @unique
  manager   Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[] @relation("EmployeeManager") // Inverse relation for self-reference
  managerId Int?
  status    String

  departments Department[] @relation("EmployeeDepartments") // Remove references

  userId     String?  @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String
  status    String
  employees Employee[] @relation("EmployeeDepartments") // Remove references
}

// Post model retained for reference/example purposes, can be removed if unnecessary
model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
